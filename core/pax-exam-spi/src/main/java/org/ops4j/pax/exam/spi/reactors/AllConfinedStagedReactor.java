/* * Copyright (C) 2010 Okidokiteam * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.ops4j.pax.exam.spi.reactors;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Set;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.ops4j.pax.exam.Option;import org.ops4j.pax.exam.TestAddress;import org.ops4j.pax.exam.TestContainer;import org.ops4j.pax.exam.TestContainerFactory;import org.ops4j.pax.exam.TestProbeProvider;import org.ops4j.pax.exam.spi.StagedExamReactor;import org.ops4j.pax.exam.spi.container.PlumbingContext;import org.ops4j.pax.exam.spi.probesupport.DefaultTestAddress;/** * This will use new containers for any regression (hence confined) */public class AllConfinedStagedReactor implements StagedExamReactor {    private static Logger LOG = LoggerFactory.getLogger( AllConfinedStagedReactor.class );    final private List<TestProbeProvider> m_probes;    final private List<TestContainer> m_containers;    final private PlumbingContext m_ctx;    private HashMap<TestAddress, TestContainer> m_map;    /**     * @param ctx        context to be used underneath     * @param containers to be used     * @param containers to be used     * @param mProbes    probes to be installed     */    public AllConfinedStagedReactor( PlumbingContext ctx, List<TestContainer> containers, List<TestProbeProvider> mProbes )    {        m_probes = mProbes;        m_ctx = ctx;        m_containers = containers;        m_map = new HashMap<TestAddress, TestContainer>();        // todo: don't do this here.        for( TestContainer container : m_containers ) {            for( TestProbeProvider builder : m_probes ) {                for( TestAddress a : builder.getTests() ) {                    m_map.put( new DefaultTestAddress( a ), container );                }            }        }    }    public void invoke( TestAddress address )        throws Exception    {        assert ( address != null ) : "TestAddress must not be null.";        // you can directly invoke:        TestContainer container = m_map.get( address );        container.start();        LOG.debug( "Test Container is ready." );        try {            for( TestProbeProvider builder : m_probes ) {                LOG.info( "installing probe " + builder );                container.install( builder.getStream() );            }            m_ctx.execute( container, address );        } finally {            container.stop();        }    }    public Set<TestAddress> getTargets()    {        return m_map.keySet();    }    public void tearDown()    {        // does not do anything.    }}