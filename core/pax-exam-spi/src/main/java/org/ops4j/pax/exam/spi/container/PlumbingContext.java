/* * Copyright 2009 Toni Menzel. * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or * implied. * * See the License for the specific language governing permissions and * limitations under the License. */package org.ops4j.pax.exam.spi.container;import java.io.IOException;import java.io.InputStream;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.lang.reflect.Modifier;import java.net.URL;import java.util.ArrayList;import java.util.List;import java.util.Properties;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.ops4j.pax.exam.TestAddress;import org.ops4j.pax.exam.TestProbeBuilder;import org.ops4j.pax.exam.TestProbeProvider;import org.ops4j.pax.exam.TestTarget;import org.ops4j.pax.exam.raw.extender.ProbeInvoker;import org.ops4j.pax.exam.spi.probesupport.TestProbeBuilderImpl;import org.ops4j.store.Store;import org.ops4j.store.StoreFactory;/** * @author Toni Menzel * @since Jan 11, 2010 */public class PlumbingContext {    private static Logger LOG = LoggerFactory.getLogger( PlumbingContext.class );    private static final String PROBE_SIGNATURE_KEY = "Probe-Signature";    private static final int TIMEOUT_IN_MILLIS = 2000;    private Store<InputStream> m_store;    public PlumbingContext() {        m_store = StoreFactory.defaultStore();    }    public TestProbeBuilder createProbe( Properties p )        throws IOException    {        return new TestProbeBuilderImpl( p, m_store );    }    public TestProbeBuilder createProbe()        throws IOException    {        Properties p = new Properties();        return createProbe( p );    }    public void execute( TestTarget target, TestAddress address )        throws InvocationTargetException, ClassNotFoundException, IllegalAccessException, InstantiationException    {        assert ( target != null ) : "TestTarget must not be null.";        assert ( address != null ) : "TestAddress must not be null.";        String filterExpression = "(" + PROBE_SIGNATURE_KEY + "=" + address.root().identifier() + ")";        ProbeInvoker service = target.getService( ProbeInvoker.class, filterExpression, TIMEOUT_IN_MILLIS );        service.call();    }}