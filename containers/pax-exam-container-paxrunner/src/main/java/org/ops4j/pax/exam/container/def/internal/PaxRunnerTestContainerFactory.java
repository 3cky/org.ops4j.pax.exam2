/* * Copyright 2009 Alin Dreghiciu. * Copyright 2011 Toni Menzel. * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or * implied. * * See the License for the specific language governing permissions and * limitations under the License. */package org.ops4j.pax.exam.container.def.internal;import java.io.IOException;import java.util.ArrayList;import java.util.List;import java.util.UUID;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.ops4j.pax.exam.Option;import org.ops4j.pax.exam.TestContainer;import org.ops4j.pax.exam.TestContainerException;import org.ops4j.pax.exam.TestContainerFactory;import org.ops4j.pax.exam.options.FrameworkOption;import org.ops4j.pax.runner.platform.DefaultJavaRunner;import static org.ops4j.pax.exam.CoreOptions.*;import static org.ops4j.pax.exam.OptionUtils.*;/** * Factory for {@link PaxRunnerTestContainer}. * * @author Toni Menzel * @since 2.0, March 09, 2011 */public class PaxRunnerTestContainerFactory    implements TestContainerFactory {    private static final Logger LOG = LoggerFactory.getLogger( PaxRunnerTestContainerFactory.class );    private static final int PORT = 21412;    private RMIRegistry m_rmiRegistry;    public PaxRunnerTestContainerFactory()        throws Exception    {        m_rmiRegistry = new RMIRegistry( PORT ).register();    }    /**     * {@inheritDoc}     */    public TestContainer[] parse( Option... options )    {        options = expand( combine( options, setDefaultOptions() ) );        List<TestContainer> containers = new ArrayList<TestContainer>();        FrameworkOption[] frameworks = ( filter( FrameworkOption.class, options ) );        if( frameworks.length == 0 ) {            frameworks = new FrameworkOption[]{ felix() };        }        options = remove( FrameworkOption.class, options );        for( FrameworkOption framework : frameworks ) {            options = combine( options, framework );            containers.add( new PaxRunnerTestContainer( new DefaultJavaRunner( false ),                                                        m_rmiRegistry.getHost(),                                                        m_rmiRegistry.getPort(),                                                        options            )            );        }        return containers.toArray( new TestContainer[ containers.size() ] );    }    public void shutdown()    {        System.gc();    }    private Option[] setDefaultOptions()    {        return new Option[]{            // remote bundle context bundle            // rmi communication port            //,            // boot delegation for sun.*. This seems only necessary in Knopflerfish version > 2.0.0            bootDelegationPackage( "sun.*" ),            url( "link:classpath:META-INF/links/org.ops4j.pax.exam.rbc.link" ),            url( "link:classpath:META-INF/links/org.ops4j.pax.extender.service.link" ),            url( "link:classpath:META-INF/links/org.osgi.compendium.link" ),            url( "link:classpath:META-INF/links/org.ops4j.pax.logging.api.link" )        };    }}