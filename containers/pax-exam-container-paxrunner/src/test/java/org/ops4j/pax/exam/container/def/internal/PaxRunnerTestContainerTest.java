package org.ops4j.pax.exam.container.def.internal;import java.io.File;import java.io.IOException;import org.junit.Test;import org.mockito.Matchers;import org.osgi.framework.Bundle;import org.ops4j.pax.exam.Customizer;import org.ops4j.pax.exam.TestContainer;import org.ops4j.pax.exam.container.remote.RBCRemoteTarget;import org.ops4j.pax.exam.rbc.client.RemoteBundleContextClient;import org.ops4j.pax.runner.platform.StoppableJavaRunner;import static org.mockito.Mockito.*;/** * Tests for PaxRunnerTestContainer */public class PaxRunnerTestContainerTest {    @Test    public void testLifecycleWithRBC()        throws Exception    {        Long timeout = 5000L;        StoppableJavaRunner runner = mock( StoppableJavaRunner.class );        RBCRemoteTarget remote = mock( RBCRemoteTarget.class );        RemoteBundleContextClient client = mock( RemoteBundleContextClient.class );        when( remote.getClientRBC() ).thenReturn( client );        TestContainer testContainer = new PaxRunnerTestContainer( runner, new String[]{ }, getCache(), timeout, remote, new Customizer[]{ } );        // START PHASE        testContainer.start();        verify( runner ).exec( Matchers.<String[]>anyVararg(), Matchers.<String[]>anyVararg(), anyString(), Matchers.<String[]>anyVararg(), anyString(), any( File.class ) );        verify( client ).waitForState( PaxRunnerTestContainer.SYSTEM_BUNDLE, Bundle.ACTIVE, timeout );        // STOP PHASE        testContainer.stop();        verify( client ).stop();        verify( runner ).shutdown();        verify( remote ).cleanup();    }    /**     * This involves the entire underlying Pax Runner + RBC Stack, So we just hope that goes through.     *     * @throws Exception In case of a problem     */    @Test    public void rbcTest()        throws Exception    {        TestContainer testContainer = new PaxRunnerTestContainerFactory().parse()[ 0 ];        testContainer.start();        testContainer.stop();    }    /**     * This is because we had issues with proper RMI handling in the past. This test is very routh but about to cover that.     *     * @throws Exception In case of problems     */    @Test    public void restartTest()        throws Exception    {        TestContainer testContainer = new PaxRunnerTestContainerFactory().parse()[ 0 ];        testContainer.start();        testContainer.stop();        // Restart again        testContainer.start();        testContainer.stop();    }    private File getCache()        throws IOException    {        File f = File.createTempFile( "pax", "exam" );        f.delete();        f.mkdirs();        return f;    }}